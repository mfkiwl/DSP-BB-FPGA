{
	"formal": {
		"prefix": "formal",
		"body": [
		  "/*",
		  "***************************************************************************",
		  "* Requirements",
		  "***************************************************************************",
		  "*/",
		  "",
		  "// 1) cover 10*-5 = -50",
		  "// 2) if a<0 && b>0, sum<b",
		  "// 3) if a>0 && b>0, sum>a && sum>b",
		  "// 4) if a<0 && b<0, sum<a && sum<b",
		  "",
		  "/*",
		  "***************************************************************************",
		  "* formal verification code ",
		  "* (only formal verification here ... other tests in COCOTB module)",
		  "***************************************************************************",
		  "*/",
		  "",
		  "`ifdef  FORMAL",
		  "",
		  "reg f_past_valid = 1'b0;",
		  "always @(posedge i_clk)",
		  "begin",
		  "    f_past_valid <= 1'b1;",
		  "end",
		  "",
		  "// selecting from a set of tests",
		  "localparam [2:0] FORMAL_TEST = 3'b001;",
		  "",
		  "generate",
		  "",
		  "    // simple alternative to testbench",
		  "    if (FORMAL_TEST == 3'b000)",
		  "    begin",
		  "        always @(posedge i_clk)",
		  "        begin",
		  "        end",
		  "    end",
		  "",
		  "    // asserting \"\"",
		  "    else if (FORMAL_TEST == 3'b001)",
		  "    begin",
		  "        always @(posedge i_clk)",
		  "        begin",
		  "        end",
		  "    end",
		  "",
		  "    // asserting \"\"",
		  "    else if (FORMAL_TEST == 3'b010)",
		  "    begin",
		  "        always @(posedge i_clk)",
		  "        begin",
		  "        end",
		  "    end",
		  "",
		  "    // asserting \"\"",
		  "    else if (FORMAL_TEST == 3'b011)",
		  "    begin",
		  "        always @(posedge i_clk)",
		  "        begin",
		  "        end",
		  "    end",
		  "",
		  "endgenerate",
		  "",
		  "`endif  // FORMAL  "
		],
		"description": ""
	  }
}